<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>后台管理项目实践</title>
    <url>/2022/04/28/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="后台管理项目"><a href="#后台管理项目" class="headerlink" title="后台管理项目"></a>后台管理项目</h1><h2 id="day-01"><a href="#day-01" class="headerlink" title="day-01"></a>day-01</h2><h3 id="01-项目模板介绍"><a href="#01-项目模板介绍" class="headerlink" title="01-项目模板介绍"></a>01-项目模板介绍</h3><ol>
<li>各文件介绍<img src="/2022/04/28/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/01-01.png" class></li>
</ol>
]]></content>
      <categories>
        <category>前端项目</category>
        <category>后台管理项目</category>
      </categories>
      <tags>
        <tag>项目实践</tag>
      </tags>
  </entry>
  <entry>
    <title>前端电商项目实践</title>
    <url>/2022/04/25/%E5%89%8D%E7%AB%AF%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="电商项目"><a href="#电商项目" class="headerlink" title="电商项目"></a>电商项目</h1><h2 id="day-01"><a href="#day-01" class="headerlink" title="day-01"></a>day-01</h2><h3 id="01-项目初始化"><a href="#01-项目初始化" class="headerlink" title="01-项目初始化"></a>01-项目初始化</h3><p>01.初始化项目后的各文件说明<br>    <img src="/2022/04/25/%E5%89%8D%E7%AB%AF%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/01-1.png" class></p>
<p>02.项目其他配置</p>
<ol>
<li><strong>package.json</strong>:script操作脚本指令<br> 可以使其运行项目时自动打开浏览器</li>
<li><strong>vue.config.js</strong>:<br> 可以关闭语法检查、配置代理服务器…</li>
<li><strong>jsconfig.json</strong>:<br> 可以配置src文件夹别名 –&gt; @</li>
</ol>
<h3 id="02-非路由组件与路由组件："><a href="#02-非路由组件与路由组件：" class="headerlink" title="02-非路由组件与路由组件："></a>02-非路由组件与路由组件：</h3><pre><code>由于当前使用的页面大多为单页面网页/应用，因此常常需要借助路由来实现页面切换。
其中需要被切换页面组件为路由组件，一般放置于pages\views文件夹中。
固定的页面或需要被其他路由页面使用的页面组件为非路由组件，一般放置于components文件夹中。
</code></pre>
<h3 id="03-vue-router的使用："><a href="#03-vue-router的使用：" class="headerlink" title="03-vue-router的使用："></a>03-vue-router的使用：</h3><ol>
<li>使用步骤：引入vue-router -&gt; vue使用vue-router插件 -&gt; 将配置的路由暴露并在入口文件中配置给vue实例</li>
<li>路由配置：简单的配置主要包括component和path</li>
<li>相关问题：<ol>
<li>路由传参<ol>
<li>路由传参使用对象写法时：<br>path无法结合params，需要使用name来结合params使用；<br>query二者均可。</li>
<li>params参数配置可传可不传：<br>在路由配置处params参数后添加 <strong>?</strong></li>
<li>params参数为空 如何处理：<br>|| ‘’(并上空字符串)</li>
<li>props传参：<br>布尔形式：参数为params参数；<br>对象形式：<br>函数形式：</li>
</ol>
</li>
<li>路由导航<ol>
<li>NavigationDuplicated问题：多次触发时会出现<br> 在push函数后添加promise，成功和失败的回调函数 -&gt; 比较麻烦<br> 修改 push 函数 </li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="04-组件编写："><a href="#04-组件编写：" class="headerlink" title="04-组件编写："></a>04-组件编写：</h3>]]></content>
      <categories>
        <category>前端项目</category>
        <category>电商项目</category>
      </categories>
      <tags>
        <tag>项目实践</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode刷题笔记</title>
    <url>/2022/04/25/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="leetcode刷题"><a href="#leetcode刷题" class="headerlink" title="leetcode刷题"></a>leetcode刷题</h1><h2 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h2><h3 id="1、简单类型"><a href="#1、简单类型" class="headerlink" title="1、简单类型"></a>1、简单类型</h3><h4 id="01、合并两有序链表"><a href="#01、合并两有序链表" class="headerlink" title="01、合并两有序链表"></a>01、合并两有序链表</h4><p>1.题目描述：<br>    <img src="/2022/04/25/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/1-01-%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.png" class></p>
<p>2.解题前的思路：</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="计算机网络-微课堂笔记"><a href="#计算机网络-微课堂笔记" class="headerlink" title="计算机网络(微课堂笔记)"></a>计算机网络(微课堂笔记)</h1><h2 id="一、计算机网络概述"><a href="#一、计算机网络概述" class="headerlink" title="一、计算机网络概述"></a>一、计算机网络概述</h2><h3 id="1、作用：信息服务基础设施"><a href="#1、作用：信息服务基础设施" class="headerlink" title="1、作用：信息服务基础设施"></a>1、作用：信息服务基础设施</h3><h3 id="2、因特网概述"><a href="#2、因特网概述" class="headerlink" title="2、因特网概述:"></a>2、因特网概述:</h3><h4 id="①-网络、互连网-互联网-、因特网的区别"><a href="#①-网络、互连网-互联网-、因特网的区别" class="headerlink" title="①. 网络、互连网(互联网)、因特网的区别"></a>①. 网络、互连网(互联网)、因特网的区别</h4><pre><code>网络：节点 + 链路  
互联网：互相连接的网络  
因特网：最大的互联网  
</code></pre>
<h4 id="②-概述"><a href="#②-概述" class="headerlink" title="②. 概述"></a>②. 概述</h4><pre><code>发展阶段  
标准化  
组成部分：边缘部分(应用) + 核心部分(连通、交换)
</code></pre>
<h3 id="3、交换方式"><a href="#3、交换方式" class="headerlink" title="3、交换方式"></a>3、交换方式</h3><pre><code>包含三种：电路交换 报文交换 分组交换
</code></pre>
<!-- ![交换方式](./../../public/2022/03/07/计算机网络/1.1_交换方式.jpg) -->
<img src="/2022/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1_%E4%BA%A4%E6%8D%A2%E6%96%B9%E5%BC%8F.png" class>

]]></content>
      <categories>
        <category>编程基础</category>
        <category>计网</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>暑期复习、学习小结</title>
    <url>/2022/07/10/%E6%9A%91%E6%9C%9F%E5%A4%8D%E4%B9%A0%E3%80%81%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前期回顾"><a href="#前期回顾" class="headerlink" title="前期回顾"></a>前期回顾</h1><h2 id="07-06"><a href="#07-06" class="headerlink" title="07-06"></a>07-06</h2><h3 id="①复习Java部分知识点，包括基础、面向对象、异常、集合、反射"><a href="#①复习Java部分知识点，包括基础、面向对象、异常、集合、反射" class="headerlink" title="①复习Java部分知识点，包括基础、面向对象、异常、集合、反射"></a>①复习Java部分知识点，包括基础、面向对象、异常、集合、反射</h3><h3 id="重点体现在："><a href="#重点体现在：" class="headerlink" title="重点体现在："></a>重点体现在：</h3><pre><code>    1、代理模式的理解：之所以使用代理，某种程度上是需要进行功能增强；
    2、工厂模式的理解：由于对象(实例)创建过程与调用过程不分离会导致代码大量耦合，即
                      改动所创建的对象是会运行到对象的调用过程；
</code></pre>
<h2 id="07-07"><a href="#07-07" class="headerlink" title="07-07"></a>07-07</h2><h3 id="①复习反射部分的知识："><a href="#①复习反射部分的知识：" class="headerlink" title="①复习反射部分的知识："></a>①复习反射部分的知识：</h3><pre><code>    1、动态代理：①如何创建被代理类的对象？-&gt;使用反射，
                具体使用Proxy.newProxyInstance()方法：
                    参数1：类加载器；
                    参数2：被代理类实现的接口；
                    参数3：InvocationHandler的实现类
                ②如何调用被代理类的同名方法？-&gt;InvocationHandler的实现类
                    要求1：创建一属性为被代理类的对象
                    要求2：重写 invoke 方法，目的是在创建的代理类调用相应的方法时
                           会调用 invoke()，这样便可在自定义的invoke()内完成增强逻辑
    2、JDBC:连接与Statement对象的创建：
                Statement与preparedStatemment区别在于：
                    前者可能出现sql注入问题、以及无法传输对象
                    后者使用比较方便，实际中常用
</code></pre>
<h2 id="07-08"><a href="#07-08" class="headerlink" title="07-08"></a>07-08</h2><h3 id="①JDBC知识回顾："><a href="#①JDBC知识回顾：" class="headerlink" title="①JDBC知识回顾："></a>①JDBC知识回顾：</h3><pre><code>    1、JDBC：一组规范、包含面向数据库商的接口及面向编程者的抽象接口
                步骤：
                    导入java.sql、
                    加载并注册驱动(相应的数据库)、
                    创建连接、
                    执行sql语句、
                    获取相应的结果、
                    释放连接
    2、连接：加载驱动时会自动执行代码块中的注册驱动的语句：com.mysql.jdbc.Driver 
                连接时需提供：JDBC URL\user\paswd。
                使用 DriverManager.getConnection()创建Connection对象
    3、数据库相关操作：
                ORM：对象关系映射
                    将数据库的表对应于工程内的一个对象
                CRUD：增删改查
                    创建了数据库的连接后，此时工程内相应的方法对应数据库中的sql语句，
                    从而进行相应的操作
</code></pre>
<h2 id="07-09"><a href="#07-09" class="headerlink" title="07-09"></a>07-09</h2><h3 id="①Spring部分的内容回顾："><a href="#①Spring部分的内容回顾：" class="headerlink" title="①Spring部分的内容回顾："></a>①Spring部分的内容回顾：</h3><pre><code>    1、IOC：
            ① 降低耦合性、将对象创建的过程交给Spring进行管理-&gt;通过一些接口
                BeanFactory-&gt;ApplicationContext-&gt;FileSystem..\ClassPath..

            ② Bean管理：普通Bean与
                        FactoryBean：创建类实现该接口并重写相应的方法可以将其理解为Bean工厂，
                        配置文件中配置了自定义的类，实际在getBean中获取的Bean却非配置文件中的，
                        而是配置文件中getObject中的Bean

                        bean生命周期：
                                创建bean(空参构造器)-&gt;
                                属性注入-&gt;
                                初始化-&gt;
                                可获取状态-&gt;
                                容器关闭，bean销毁

                    1、对象创建：
                            ①、xml方式
                            ②、注解方式
                    2、属性注入：
    2、AOP：降低业务逻辑的耦合性
                回顾之前的动态代理：newProxyInstance中指定了类加载器、相应的接口、InvocationHandler实现类。
                在InvocationHandler中指明被代理对象，通过重写 invoke 方法实现功能增强。
</code></pre>
<h2 id="07-10"><a href="#07-10" class="headerlink" title="07-10"></a>07-10</h2><h3 id="①Tomcat回顾："><a href="#①Tomcat回顾：" class="headerlink" title="①Tomcat回顾："></a>①Tomcat回顾：</h3><pre><code>    1、在我理解，其本质就是运行在本地的一个进程；它能够提供 http协议 将相应文件夹内的文件进行展示
    2、在idea上的部署，Application context为tomcat服务器所访问的工程路径
</code></pre>
<h3 id="②Servlet回顾："><a href="#②Servlet回顾：" class="headerlink" title="②Servlet回顾："></a>②Servlet回顾：</h3><pre><code>    1、定义：Servlet是用于处理请求和响应的接口。
            也就是客户端(浏览器)的url路径变化会使得客户端向服务器发送请求；
            而用于处理请求的逻辑则可通过Servlet来进行控制管理
    2、生命周期：
            ①执行构造器：由于用于处理逻辑的类为Servlet的实现类，因此底层调用Servlet时，需要创建对象；
            ②初始化：Servlet接口中的抽象方法；
            ③执行业务逻辑方法：Servlet主要是用于处理相应的业务逻辑的；
            ④销毁：当相应的逻辑处理完后，为减少内存占用会销毁相应的对象
    3、实际常常使用继承 HttpServlet 创建相应的类
    4、ServletConfig：
            ①获取xml配置文件中的Servlet实现类的别名；
            ②获取xml配置文件中的init-params
            ③获取ServletContext对象
    5、ServletContext：web工程启动时创建，因此每个web工程中只有一个
            ①获取xml配置文件中的context-param
            ②获取指定路径的工程路径和绝对路径(/:指工程路径)
            ③类似map 进行数据存储
</code></pre>
<h2 id="07-11"><a href="#07-11" class="headerlink" title="07-11"></a>07-11</h2><h3 id="①Maven回顾："><a href="#①Maven回顾：" class="headerlink" title="①Maven回顾："></a>①Maven回顾：</h3><pre><code>    1、maven中‘坐标’：groupId，artifactId，versionId
    2、
</code></pre>
<h3 id="②"><a href="#②" class="headerlink" title="②"></a>②</h3><h2 id="07-14"><a href="#07-14" class="headerlink" title="07-14"></a>07-14</h2><h3 id="①SpringMVC回顾："><a href="#①SpringMVC回顾：" class="headerlink" title="①SpringMVC回顾："></a>①SpringMVC回顾：</h3><pre><code>    1、
</code></pre>
]]></content>
      <categories>
        <category>后台开发</category>
        <category>Spring系列</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>面试金典笔记</title>
    <url>/2022/05/02/%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="面试金典"><a href="#面试金典" class="headerlink" title="面试金典"></a>面试金典</h1><h2 id="简单题型"><a href="#简单题型" class="headerlink" title="简单题型"></a>简单题型</h2><h3 id="01-判断字符是否全部不同"><a href="#01-判断字符是否全部不同" class="headerlink" title="01-判断字符是否全部不同"></a>01-判断字符是否全部不同</h3>]]></content>
      <categories>
        <category>编程基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>面试金典</tag>
      </tags>
  </entry>
</search>
